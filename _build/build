#! /bin/sh

# Based on:
#   https://kakyoism.github.io/2019/10/17/Build-a-GNU-Autotools-based-project-for-iOS-Part-1/
#
# Build for iOS 64bit-ARM variants and iOS Simulator
# - Place the script at project root
# - Customize MIN_IOS_VERSION and other flags as needed
#
# Test Environment
# - macOS 10.14.6
# - iOS 13.1
# - Xcode 11.1
#

# Target folder structure:
#  .
#  â”œâ”€â”€ _build
#  â”‚Â Â  â”œâ”€â”€ libsodium
#  â”‚Â Â  â”‚Â Â  â”œâ”€â”€ platforms
#  â”‚Â Â  â”‚Â Â  â”‚Â Â  â”œâ”€â”€ arm64
#  â”‚Â Â  â”‚Â Â  â”‚Â Â  â””â”€â”€ x86_64
#  â”‚Â Â  â”‚Â Â  â””â”€â”€ universal
#  â”‚Â Â  â””â”€â”€ zeromq
#  â”‚Â Â      â””â”€â”€ platforms
#  â”‚Â Â          â”œâ”€â”€ arm64
#  â”‚Â Â          â””â”€â”€ x86_64
#  â””â”€â”€ universal            ('prefix' for zmq build)
#      â”œâ”€â”€ include
#      â””â”€â”€ lib

# libsodium .a and .h *don't* need to appear in `built`

# Stop on errors
set -euo pipefail

# Print commands and expanded vars
# set -x

# Library versions (used to fetch source tarballs)
SodiumVersion="1.0.18"
ZmqVersion="4.3.3"

# Common settings:
buildRoot="$( cd "$( dirname "$0" )" && pwd )"

# Compiler options
OPT_FLAGS="-O3 -fembed-bitcode -fmodules"
MAKE_JOBS=8

MIN_IOS_VERSION=12.0
MIN_TVOS_VERSION=12.0
MIN_WATCHOS_VERSION=7.0

Build() {
    # Ensure -fembed-bitcode builds, as workaround for libtool macOS bug
    export MACOSX_DEPLOYMENT_TARGET="10.4"
    # Get the correct toolchain for target platforms
    export CC=$(xcrun --find --sdk "${SDK}" clang)
    export CXX=$(xcrun --find --sdk "${SDK}" clang++)
    export CPP=$(xcrun --find --sdk "${SDK}" cpp)
    export CFLAGS="${HOST_FLAGS} ${OPT_FLAGS}"
    export CXXFLAGS="${HOST_FLAGS} ${OPT_FLAGS}"
    export LDFLAGS="${HOST_FLAGS}"

    EXEC_PREFIX="${PLATFORMS}/${SDK}"
    echo "*** Building ${SDK} for ${PLATFORM} ***"
    # --disable-shared to avoid Xcode loading dylibs even when staticlibs exist
    ./configure \
        --host="${CHOST}" \
        --prefix="${PREFIX}" \
        --exec-prefix="${EXEC_PREFIX}" \
        --enable-static \
        --disable-shared \
        $ADDITIONAL

    make clean
    mkdir -p "${PLATFORMS}" &> /dev/null
    make V=1 -j"${MAKE_JOBS}" --debug=j
    make install
}

GetZmq() {
    echo "Fetching zmq..."
    Tar="zeromq-${ZmqVersion}.tar.gz"
    Url="https://github.com/zeromq/libzmq/releases/download/v${ZmqVersion}/${Tar}"

    if [ ! -e "$Tar" ]
    then
        curl -L -O $Url
    else
        echo "Already had '$Tar'"
    fi
    
    if [ ! -d "zeromq-${ZmqVersion}" ]
    then
        tar xzf "$Tar"    
    else
    	echo ".. already expanded"
    fi
}

GetSodium() {
    echo "Fetching libSodium..."
    Tar="libsodium-${SodiumVersion}.tar.gz"
    
    if [ ! -e "$Tar" ]
    then
        curl -L -o "$Tar" https://github.com/jedisct1/libsodium/archive/${SodiumVersion}.tar.gz
    else
        echo "Already had '$Tar'"
    fi
    
    if [ ! -d "libsodium-1.0.18" ]
    then
        tar xzf "$Tar"    
    else
    	echo ".. already expanded"
    fi
}

# SDK names retrieved via `xcodebuild -showsdks`

SIMULATOR_ARCHS="-arch x86_64 -arch arm64e -arch arm64"
    
BuildTv() {
	if [[ $PLATFORM == "device" ]]
	then
		SDK=appletvos
	    ARCH_FLAGS="-arch arm64"
	    VERSION_FLAGS="-mappletvos-version-min=${MIN_TVOS_VERSION}"
	else
		SDK=appletvsimulator
		ARCH_FLAGS=${SIMULATOR_ARCHS}
	    VERSION_FLAGS="-mappletvsimulator-version-min=${MIN_TVOS_VERSION}"
	fi
    HOST_FLAGS="${ARCH_FLAGS} ${VERSION_FLAGS} -isysroot $(xcrun --sdk ${SDK} --show-sdk-path)"
    Build
}

BuildWatch() {
	if [[ $PLATFORM == "device" ]]
	then
		SDK=watchos
	    ARCH_FLAGS="-arch armv7k -arch arm64_32"
	    VERSION_FLAGS="-mwatchos-version-min=${MIN_WATCHOS_VERSION}"
	else
		SDK=watchsimulator
		ARCH_FLAGS=${SIMULATOR_ARCHS}
		VERSION_FLAGS="-mwatchsimulator-version-min=${MIN_WATCHOS_VERSION}"
	fi
    HOST_FLAGS="${ARCH_FLAGS} ${VERSION_FLAGS} -isysroot $(xcrun --sdk ${SDK} --show-sdk-path)"
    Build
}

BuildPhone() {
	if [[ $PLATFORM == "device" ]]
	then
		SDK=iphoneos
	    ARCH_FLAGS="-arch arm64 -arch arm64e"
	    VERSION_FLAGS="-miphoneos-version-min=${MIN_IOS_VERSION}"
	else
		SDK=iphonesimulator
		ARCH_FLAGS=${SIMULATOR_ARCHS}
	    VERSION_FLAGS="-miphonesimulator-version-min=${MIN_IOS_VERSION}"
	fi
    HOST_FLAGS="${ARCH_FLAGS} ${VERSION_FLAGS} -isysroot $(xcrun --sdk ${SDK} --show-sdk-path)"
    Build
}

BuildDevices() {
    PLATFORM="device"
    CHOST="arm-apple-darwin"    
	BuildPhone
	BuildTv
	BuildWatch
}

BuildSims() {
    PLATFORM="simulator"
    CHOST="x86_64-apple-darwin"
	BuildPhone
	BuildTv
	BuildWatch
}

BuildZmq() {
    GetZmq
    echo "Building ZMQ..."
    ZmqRoot="zeromq-${ZmqVersion}"
    PLATFORMS="${buildRoot}/${ZmqRoot}/_build/platforms"
    PREFIX="${buildRoot}/universal"
    UNIVERSAL="${buildRoot}/universal/lib"
    SodiumRoot="libsodium-${SodiumVersion}"
    ADDITIONAL="--with-libsodium=${buildRoot}/${SodiumRoot}/_build/universal"
    
    mkdir -p "$UNIVERSAL"
    (
    	cd "${ZmqRoot}"
    
	    ./autogen.sh
    	BuildDevices
	    BuildSims
	)
    # BuildUniversal
}

BuildSodium() {
    GetSodium
    echo "Building libSodium..."
    SodiumRoot="libsodium-${SodiumVersion}"
    PREFIX="${buildRoot}/${SodiumRoot}/_build"
    PLATFORMS="${PREFIX}/platforms"
    UNIVERSAL="${PREFIX}/universal"
    
    mkdir -p "$UNIVERSAL"
    (
    	cd "$SodiumRoot"
	    ./autogen.sh
	    ADDITIONAL=""
    	BuildDevices
	    BuildSims
	)
    # BuildUniversal
}

makeXcFramework() {
	rm -rf ../libzmq.xcframework
	
	xcodebuild \
		-create-xcframework \
		-library zeromq-${ZmqVersion}/_build/platforms/iphonesimulator/lib/libzmq.a \
		-headers universal/include \
		-library zeromq-${ZmqVersion}/_build/platforms/iphoneos/lib/libzmq.a \
		-headers universal/include \
		-library zeromq-${ZmqVersion}/_build/platforms/watchsimulator/lib/libzmq.a \
		-headers universal/include \
		-library zeromq-${ZmqVersion}/_build/platforms/watchos/lib/libzmq.a \
		-headers universal/include \
		-library zeromq-${ZmqVersion}/_build/platforms/appletvsimulator/lib/libzmq.a \
		-headers universal/include \
		-library zeromq-${ZmqVersion}/_build/platforms/appletvos/lib/libzmq.a \
		-headers universal/include \
		-output ../libzmq.xcframework
}

# BuildSodium

# BuildZmq

makeXcFramework

echo "Done! ðŸ˜€"
